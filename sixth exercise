class Car:
    def __init__(self, registration_number, max_speed):
        self.registration_number = registration_number
        self.max_speed = max_speed
        self.current_speed = 0
        self.travelled_distance = 0

    def accelerate(self, speed_change):
        if speed_change > 0:
            self.current_speed = min(self.current_speed + speed_change, self.max_speed)
        else:
            self.current_speed = max(self.current_speed + speed_change, 0)

    def print_properties(self):
        print(f"Registration Number: {self.registration_number}")
        print(f"Max Speed: {self.max_speed} km/h")
        print(f"Current Speed: {self.current_speed} km/h")
        print(f"Travelled Distance: {self.travelled_distance} km")
        print()

# Main program
if __name__ == "__main__":
    # Create a new car
    new_car = Car(registration_number="ABC-123", max_speed=142)

    # Print initial properties
    print("Initial Car Properties:")
    new_car.print_properties()

    # Accelerate the car
    new_car.accelerate(30)
    new_car.accelerate(70)
    new_car.accelerate(50)

    # Print current speed after acceleration
    print("Current Speed after Acceleration:")
    new_car.print_properties()

    # Apply emergency brake
    new_car.accelerate(-200)

    # Print final speed after emergency brake
    print("Final Speed after Emergency Brake:")
    new_car.print_properties()

######
class Car:
    def __init__(self, registration_number, max_speed):
        self.registration_number = registration_number
        self.max_speed = max_speed
        self.current_speed = 0
        self.travelled_distance = 0

    def accelerate(self, speed_change):
        new_speed = self.current_speed + speed_change
        self.current_speed = max(0, min(new_speed, self.max_speed))

    def drive(self, hours):
        distance_travelled = self.current_speed * hours
        self.travelled_distance += distance_travelled

# Main program
if __name__ == "__main__":
    # Create a new car
    new_car = Car(registration_number="ABC-123", max_speed=142)

    # Print out all properties of the new car
    print(f"Registration Number: {new_car.registration_number}")
    print(f"Maximum Speed: {new_car.max_speed} km/h")
    print(f"Current Speed: {new_car.current_speed} km/h")
    print(f"Travelled Distance: {new_car.travelled_distance} km\n")

    # Accelerate the car
    new_car.accelerate(30)
    print(f"Accelerating by +30 km/h. Current Speed: {new_car.current_speed} km/h")

    new_car.accelerate(70)
    print(f"Accelerating by +70 km/h. Current Speed: {new_car.current_speed} km/h")

    new_car.accelerate(50)
    print(f"Accelerating by +50 km/h. Current Speed: {new_car.current_speed} km/h\n")

    # Drive the car for 1.5 hours
    new_car.drive(1.5)
    print(f"Driving for 1.5 hours. Travelled Distance: {new_car.travelled_distance} km\n")

    # Use emergency brake
    new_car.accelerate(-200)
    print(f"Emergency Brake! Current Speed: {new_car.current_speed} km/h")

    # Final result
    print(f"Final Travelled Distance: {new_car.travelled_distance} km")

########
import random

class Car:
    def __init__(self, registration_number, max_speed):
        self.registration_number = registration_number
        self.max_speed = max_speed
        self.current_speed = 0
        self.travelled_distance = 0

    def accelerate(self, speed_change):
        new_speed = self.current_speed + speed_change
        self.current_speed = max(0, min(new_speed, self.max_speed))

    def drive(self, hours):
        distance_travelled = self.current_speed * hours
        self.travelled_distance += distance_travelled

if __name__ == "__main__":
    # Create a list of 10 cars with random speeds and registration numbers
    cars = [Car(f"ABC-{i}", random.randint(100, 200)) for i in range(1, 11)]

    # Start the race
    race_distance = 10000
    hour = 1

    while all(car.travelled_distance < race_distance for car in cars):
        print(f"\nHour {hour} of the Race:")
        for car in cars:
            # Change speed randomly between -10 km/h and +15 km/h
            speed_change = random.randint(-10, 15)
            car.accelerate(speed_change)

            # Drive for one hour
            car.drive(1)

            # Print status of each car
            print(f"Car {car.registration_number}: Speed = {car.current_speed} km/h, Distance = {car.travelled_distance} km")

        hour += 1

    # Print final results in a table
    print("\nFinal Results:")
    print(f"{'Registration Number':<20}{'Max Speed (km/h)':<20}{'Final Speed (km/h)':<20}{'Travelled Distance (km)':<30}")
    print("="*90)
    for car in cars:
        print(f"{car.registration_number:<20}{car.max_speed:<20}{car.current_speed:<20}{car.travelled_distance:<30}")
######
class Elevator:
    def __init__(self, bottom_floor, top_floor):
        self.bottom_floor = bottom_floor
        self.top_floor = top_floor
        self.current_floor = bottom_floor

    def go_to_floor(self, destination_floor):
        while self.current_floor != destination_floor:
            if self.current_floor < destination_floor:
                self.floor_up()
            else:
                self.floor_down()

    def floor_up(self):
        if self.current_floor < self.top_floor:
            self.current_floor += 1
            print(f"Elevator is now on floor {self.current_floor}")

    def floor_down(self):
        if self.current_floor > self.bottom_floor:
            self.current_floor -= 1
            print(f"Elevator is now on floor {self.current_floor}")


class Building:
    def __init__(self, bottom_floor, top_floor, num_elevators):
        self.bottom_floor = bottom_floor
        self.top_floor = top_floor
        self.elevators = [Elevator(bottom_floor, top_floor) for _ in range(num_elevators)]

    def run_elevator(self, elevator_number, destination_floor):
        if 0 <= elevator_number < len(self.elevators):
            elevator = self.elevators[elevator_number]
            print(f"\nRunning Elevator {elevator_number + 1} to floor {destination_floor}")
            elevator.go_to_floor(destination_floor)
        else:
            print("Invalid elevator number.")

    def fire_alarm(self):
        print("\nFire alarm activated! Moving all elevators to the bottom floor.")
        for elevator in self.elevators:
            elevator.go_to_floor(self.bottom_floor)


# Test the classes
if __name__ == "__main__":
    # Test Elevator class
    h = Elevator(bottom_floor=1, top_floor=10)
    h.go_to_floor(5)
    h.go_to_floor(1)

    # Test Building class
    building = Building(bottom_floor=1, top_floor=10, num_elevators=3)
    building.run_elevator(elevator_number=0, destination_floor=8)
    building.run_elevator(elevator_number=1, destination_floor=3)

    # Test fire alarm
    building.fire_alarm()

#######
import random

class Car:
    def __init__(self, registration_number, max_speed):
        self.registration_number = registration_number
        self.max_speed = max_speed
        self.current_speed = 0
        self.travelled_distance = 0

    def accelerate(self, speed_change):
        new_speed = self.current_speed + speed_change
        self.current_speed = max(0, min(new_speed, self.max_speed))

    def drive(self, hours):
        distance_travelled = self.current_speed * hours
        self.travelled_distance += distance_travelled

class Race:
    def __init__(self, name, distance, car_list):
        self.name = name
        self.distance = distance
        self.cars = car_list

    def hour_passes(self):
        for car in self.cars:
            speed_change = random.randint(-20, 20)  # Random change of speed between -20 and 20 km/h
            car.accelerate(speed_change)
            car.drive(1)  # Simulate driving for 1 hour

    def print_status(self):
        print(f"{'Registration Number':<20} {'Current Speed (km/h)':<25} {'Travelled Distance (km)':<30}")
        for car in self.cars:
            print(f"{car.registration_number:<20} {car.current_speed:<25.2f} {car.travelled_distance:<30.2f}")
        print("\n")

    def race_finished(self):
        for car in self.cars:
            if car.travelled_distance >= self.distance:
                return True
        return False

# Main program
if __name__ == "__main__":
    # Create cars
    car_list = [Car(f"Car-{i}", random.randint(120, 180)) for i in range(1, 11)]

    # Create a race
    grand_demolition_derby = Race(name="Grand Demolition Derby", distance=8000, car_list=car_list)

    # Simulate the race
    hour_counter = 0
    while not grand_demolition_derby.race_finished():
        grand_demolition_derby.hour_passes()
        hour_counter += 1

        if hour_counter % 10 == 0:
            print(f"Hour {hour_counter}")
            grand_demolition_derby.print_status()

    # Print final status
    print("Race Finished!")
    grand_demolition_derby.print_status()
