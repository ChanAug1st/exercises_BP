class Car:
    def __init__(self, registration_number, max_speed):
        self.registration_number = registration_number
        self.max_speed = max_speed
        self.current_speed = 0
        self.travelled_distance = 0

    def accelerate(self, speed_change):
        # Check if the change is negative, reduce speed
        if speed_change < 0:
            self.current_speed = max(0, self.current_speed + speed_change)
        else:
            # Check if the new speed exceeds the maximum speed
            self.current_speed = min(self.max_speed, self.current_speed + speed_change)

    def print_car_info(self):
        print("Registration Number:", self.registration_number)
        print("Maximum Speed:", self.max_speed, "km/h")
        print("Current Speed:", self.current_speed, "km/h")
        print("Travelled Distance:", self.travelled_distance, "km")

# Main program
if __name__ == "__main__":
    # Create a new car
    new_car = Car(registration_number="ABC-123", max_speed=142)

    # Print initial car information
    print("Initial Car Information:")
    new_car.print_car_info()
    print("\nAccelerating...")

    # Accelerate the car
    new_car.accelerate(30)
    new_car.accelerate(70)
    new_car.accelerate(50)

    # Print current speed
    print("\nCurrent Speed after Acceleration:")
    new_car.print_car_info()

    # Use emergency brake
    print("\nApplying Emergency Brake...")
    new_car.accelerate(-200)

    # Print final speed after emergency brake
    print("\nFinal Speed after Emergency Brake:")
    new_car.print_car_info()

######
class Car:
    def __init__(self, registration_number, max_speed):
        self.registration_number = registration_number
        self.max_speed = max_speed
        self.current_speed = 0
        self.travelled_distance = 0

    def accelerate(self, speed_change):
        new_speed = self.current_speed + speed_change
        self.current_speed = max(0, min(new_speed, self.max_speed))

    def drive(self, hours):
        distance_travelled = self.current_speed * hours
        self.travelled_distance += distance_travelled

if __name__ == "__main__":
    # Create a new car
    new_car = Car(registration_number="ABC-123", max_speed=142)

    # Print initial properties of the car
    print("Registration Number:", new_car.registration_number)
    print("Maximum Speed:", new_car.max_speed, "km/h")
    print("Current Speed:", new_car.current_speed, "km/h")
    print("Travelled Distance:", new_car.travelled_distance, "km")

    # Accelerate the car
    new_car.accelerate(30)
    new_car.accelerate(70)
    new_car.accelerate(50)

    # Print current speed after acceleration
    print("\nCurrent Speed after Acceleration:", new_car.current_speed, "km/h")

    # Use emergency brake
    new_car.accelerate(-200)

    # Print final speed after emergency brake
    print("\nFinal Speed after Emergency Brake:", new_car.current_speed, "km/h")

    # Drive the car for 1.5 hours
    new_car.drive(1.5)

    # Print the updated travelled distance
    print("\nTravelled Distance after 1.5 hours of driving:", new_car.travelled_distance, "km")
########
import random

class Car:
    def __init__(self, registration_number, max_speed):
        self.registration_number = registration_number
        self.max_speed = max_speed
        self.current_speed = 0
        self.travelled_distance = 0

    def accelerate(self, speed_change):
        new_speed = self.current_speed + speed_change
        self.current_speed = max(0, min(new_speed, self.max_speed))

    def drive(self, hours):
        distance_travelled = self.current_speed * hours
        self.travelled_distance += distance_travelled

if __name__ == "__main__":
    # Create a list of 10 cars with random speeds and registration numbers
    cars = [Car(f"ABC-{i}", random.randint(100, 200)) for i in range(1, 11)]

    # Start the race
    race_distance = 10000
    hour = 1

    while all(car.travelled_distance < race_distance for car in cars):
        print(f"\nHour {hour} of the Race:")
        for car in cars:
            # Change speed randomly between -10 km/h and +15 km/h
            speed_change = random.randint(-10, 15)
            car.accelerate(speed_change)

            # Drive for one hour
            car.drive(1)

            # Print status of each car
            print(f"Car {car.registration_number}: Speed = {car.current_speed} km/h, Distance = {car.travelled_distance} km")

        hour += 1

    # Print final results in a table
    print("\nFinal Results:")
    print(f"{'Registration Number':<20}{'Max Speed (km/h)':<20}{'Final Speed (km/h)':<20}{'Travelled Distance (km)':<30}")
    print("="*90)
    for car in cars:
        print(f"{car.registration_number:<20}{car.max_speed:<20}{car.current_speed:<20}{car.travelled_distance:<30}")
#######
class Elevator:
    def __init__(self, bottom_floor, top_floor):
        self.current_floor = bottom_floor
        self.bottom_floor = bottom_floor
        self.top_floor = top_floor

    def go_to_floor(self, target_floor):
        if target_floor < self.bottom_floor or target_floor > self.top_floor:
            print(f"Invalid floor {target_floor}. Elevator can only go between {self.bottom_floor} and {self.top_floor}.")
            return

        while self.current_floor != target_floor:
            if self.current_floor < target_floor:
                self.floor_up()
            elif self.current_floor > target_floor:
                self.floor_down()

    def floor_up(self):
        if self.current_floor < self.top_floor:
            self.current_floor += 1
            print(f"Elevator moved up to floor {self.current_floor}")
        else:
            print(f"Elevator is already on the top floor {self.current_floor}")

    def floor_down(self):
        if self.current_floor > self.bottom_floor:
            self.current_floor -= 1
            print(f"Elevator moved down to floor {self.current_floor}")
        else:
            print(f"Elevator is already on the bottom floor {self.current_floor}")

if __name__ == "__main__":
    # Create an elevator with 1st to 10th floors
    elevator = Elevator(bottom_floor=1, top_floor=10)

    # Move the elevator to the 5th floor
    elevator.go_to_floor(5)

    # Move the elevator back to the bottom floor
    elevator.go_to_floor(1)
#######
class Elevator:
    def __init__(self, bottom_floor, top_floor):
        self.current_floor = bottom_floor
        self.bottom_floor = bottom_floor
        self.top_floor = top_floor

    def go_to_floor(self, target_floor):
        if target_floor < self.bottom_floor or target_floor > self.top_floor:
            print(f"Invalid floor {target_floor}. Elevator can only go between {self.bottom_floor} and {self.top_floor}.")
            return

        while self.current_floor != target_floor:
            if self.current_floor < target_floor:
                self.floor_up()
            elif self.current_floor > target_floor:
                self.floor_down()

    def floor_up(self):
        if self.current_floor < self.top_floor:
            self.current_floor += 1
            print(f"Elevator moved up to floor {self.current_floor}")
        else:
            print(f"Elevator is already on the top floor {self.current_floor}")

    def floor_down(self):
        if self.current_floor > self.bottom_floor:
            self.current_floor -= 1
            print(f"Elevator moved down to floor {self.current_floor}")
        else:
            print(f"Elevator is already on the bottom floor {self.current_floor}")


class Building:
    def __init__(self, bottom_floor, top_floor, num_elevators):
        self.bottom_floor = bottom_floor
        self.top_floor = top_floor
        self.elevators = [Elevator(bottom_floor, top_floor) for _ in range(num_elevators)]

    def run_elevator(self, elevator_num, destination_floor):
        elevator = self.elevators[elevator_num]
        print(f"\nRunning Elevator {elevator_num + 1} to floor {destination_floor}:")
        elevator.go_to_floor(destination_floor)


if __name__ == "__main__":
    # Create a building with 1st to 10th floors and 3 elevators
    my_building = Building(bottom_floor=1, top_floor=10, num_elevators=3)

    # Run the elevators
    my_building.run_elevator(0, 5)
    my_building.run_elevator(1, 8)
    my_building.run_elevator(2, 3)
######
class Elevator:
    def __init__(self, bottom_floor, top_floor):
        self.current_floor = bottom_floor
        self.bottom_floor = bottom_floor
        self.top_floor = top_floor

    def go_to_floor(self, target_floor):
        if target_floor < self.bottom_floor or target_floor > self.top_floor:
            print(f"Invalid floor {target_floor}. Elevator can only go between {self.bottom_floor} and {self.top_floor}.")
            return

        while self.current_floor != target_floor:
            if self.current_floor < target_floor:
                self.floor_up()
            elif self.current_floor > target_floor:
                self.floor_down()

    def floor_up(self):
        if self.current_floor < self.top_floor:
            self.current_floor += 1
            print(f"Elevator moved up to floor {self.current_floor}")
        else:
            print(f"Elevator is already on the top floor {self.current_floor}")

    def floor_down(self):
        if self.current_floor > self.bottom_floor:
            self.current_floor -= 1
            print(f"Elevator moved down to floor {self.current_floor}")
        else:
            print(f"Elevator is already on the bottom floor {self.current_floor}")


class Building:
    def __init__(self, bottom_floor, top_floor, num_elevators):
        self.bottom_floor = bottom_floor
        self.top_floor = top_floor
        self.elevators = [Elevator(bottom_floor, top_floor) for _ in range(num_elevators)]

    def run_elevator(self, elevator_num, destination_floor):
        elevator = self.elevators[elevator_num]
        print(f"\nRunning Elevator {elevator_num + 1} to floor {destination_floor}:")
        elevator.go_to_floor(destination_floor)

    def fire_alarm(self):
        print("\nFire Alarm Activated! All elevators are moving to the bottom floor.")
        for elevator_num, elevator in enumerate(self.elevators):
            self.run_elevator(elevator_num, self.bottom_floor)


if __name__ == "__main__":
    # Create a building with 1st to 10th floors and 3 elevators
    my_building = Building(bottom_floor=1, top_floor=10, num_elevators=3)

    # Run the elevators
    my_building.run_elevator(0, 5)
    my_building.run_elevator(1, 8)
    my_building.run_elevator(2, 3)

    # Activate the fire alarm
    my_building.fire_alarm()
#######
import random

class Car:
    def __init__(self, registration_number, max_speed):
        self.registration_number = registration_number
        self.max_speed = max_speed
        self.current_speed = 0
        self.travelled_distance = 0

    def accelerate(self, speed_change):
        new_speed = self.current_speed + speed_change
        self.current_speed = max(0, min(new_speed, self.max_speed))

    def drive(self, hours):
        distance_travelled = self.current_speed * hours
        self.travelled_distance += distance_travelled

class Race:
    def __init__(self, name, distance, cars):
        self.name = name
        self.distance = distance
        self.cars = cars

    def hour_passes(self):
        for car in self.cars:
            speed_change = random.randint(-10, 15)
            car.accelerate(speed_change)
            car.drive(1)

    def print_status(self):
        print("\nCurrent Race Status:")
        print(f"{'Registration Number':<20}{'Max Speed (km/h)':<20}{'Current Speed (km/h)':<25}{'Travelled Distance (km)':<30}")
        print("="*95)
        for car in self.cars:
            print(f"{car.registration_number:<20}{car.max_speed:<20}{car.current_speed:<25}{car.travelled_distance:<30}")

    def race_finished(self):
        return any(car.travelled_distance >= self.distance for car in self.cars)

if __name__ == "__main__":
    # Create a list of 10 cars with random speeds and registration numbers
    cars_for_race = [Car(f"ABC-{i}", random.randint(100, 200)) for i in range(1, 11)]

    # Create an 8000-kilometer race called Grand Demolition Derby
    grand_demolition_derby = Race(name="Grand Demolition Derby", distance=8000, cars=cars_for_race)

    # Simulate the progressing of the race
    hours_passed = 0
    while not grand_demolition_derby.race_finished():
        grand_demolition_derby.hour_passes()
        hours_passed += 1

        # Print race status every ten hours
        if hours_passed % 10 == 0:
            grand_demolition_derby.print_status()

    # Print final race status
    grand_demolition_derby.print_status()

